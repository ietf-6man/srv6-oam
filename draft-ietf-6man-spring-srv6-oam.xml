<?xml version="1.0" encoding="US-ASCII"?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd">
<?rfc toc="yes"?>
<?rfc tocompact="yes"?>
<?rfc tocdepth="3"?>
<?rfc tocindent="yes"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes"?>
<?rfc comments="yes"?>
<?rfc inline="yes"?>
<?rfc compact="yes"?>
<?rfc subcompact="no"?> 
<rfc category="std" docName="draft-ietf-6man-spring-srv6-oam-04"
     ipr="trust200902">
  <front>
    <title abbrev="SRv6 OAM">Operations, Administration, and Maintenance (OAM) in Segment
              Routing Networks with IPv6 Data plane (SRv6)</title>

    <author fullname="Zafar Ali" initials="Z" surname="Ali">
      <organization>Cisco Systems</organization>

      <address>
        <postal>
          <street/>

          <city/>

          <code/>

          <country/>
        </postal>

        <email>zali@cisco.com</email>
      </address>
    </author>

    <author fullname="Clarence Filsfils" initials="C." surname="Filsfils">
      <organization>Cisco Systems</organization>

      <address>
        <postal>
          <street/>

          <city/>

          <code/>

          <country/>
        </postal>

        <email>cfilsfil@cisco.com</email>
      </address>
    </author>

    <author fullname="Satoru Matsushima" initials="S" surname="Matsushima">
      <organization>Softbank</organization>

      <address>
        <postal>
          <street/>

          <city/>

          <code/>

          <country/>
        </postal>

        <email>satoru.matsushima@g.softbank.co.jp</email>
      </address>
    </author>

    <author fullname="Daniel Voyer" initials="D" surname="Voyer">
      <organization>Bell Canada</organization>

      <address>
        <postal>
          <street/>

          <city/>

          <code/>

          <country/>
        </postal>

        <email>daniel.voyer@bell.ca</email>
      </address>
    </author>

    <author fullname="Mach Chen" initials="M" surname="Chen">
      <organization>Huawei</organization>

      <address>
        <postal>
          <street/>

          <city/>

          <code/>

          <country/>
        </postal>

        <email>mach.chen@huawei.com</email>
      </address>
    </author>
    
    <date year="2020"/>

    <area>Routing</area>

    <workgroup>6man</workgroup>

    <keyword>SRv6</keyword>

    <keyword>Segment Routing</keyword>

    <keyword>OAM</keyword>

    <abstract>
      <t>This document defines building blocks for Operations, Administration,
    and Maintenance (OAM) in Segment Routing Networks with IPv6 Dataplane
    (SRv6). The document also describes some SRv6 OAM mechanisms.</t>

    </abstract>

    <note title="Requirements Language">
      <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
      "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
      document are to be interpreted as described in [RFC2119].</t>
    </note>
  </front>

<middle>

    <section title="Introduction">
      <t>This document defines building blocks for
     Operations, Administration, and Maintenance (OAM) in Segment Routing
     Networks with IPv6 Dataplane (SRv6). The document also describes
     some SRv6 OAM mechanisms. </t>

	</section> 

    <section title="Conventions Used in This Document">
    
	<section title="Abbreviations">

      <t> The following abbreviations are used in this document: 
      
        <list style="hanging">
            
            <t> SID: Segment ID.
            </t>

            <t> SL: Segment Left.
           </t>
            
            <t> SR: Segment Routing.
           </t>

            <t> SRH: Segment Routing Header.
           </t>
            
            <t> SRv6: Segment Routing with IPv6 Data plane.
           </t>
           
           <t> TC: Traffic Class. 
           </t>

           <t> ICMPv6: ICMPv6 Specification [RFC4443]. 
           </t>
          </list></t>

    </section>

	<section title="Terminology and Reference Topology">
    
      <t> This document uses the terminology defined in [I-D.ietf-
     spring-srv6-network-programming]. The readers are expected to be
     familiar with the same. </t>
     
     <t> Throughout the document, the following simple topology is used for
     illustration. </t>
     
      <figure> <artwork><![CDATA[
           +--------------------------| N100 |------------------------+
           |                                                          |
              ====== link1====== link3------ link5====== link9------
              ||N1||======||N2||======| N3 |======||N4||======| N5 |
              ||  ||------||  ||------|    |------||  ||------|    |
              ====== link2====== link4------ link6======link10------
                             |                      |
                             |       ------         |
                             +-------| N6 |---------+
                               link7 |    | link8
                                     ------
	  
                           Figure 1 Reference Topology
	  ]]>
	  </artwork> </figure>      
     
    <t> In the reference topology: 

        <list style="empty">
            
            <t> Nodes N1, N2, and N4 are SRv6 capable nodes.
            </t>

            <t> Nodes N3, N5 and N6 are classic IPv6 nodes.
           </t>
            
            <t> Node N100 is a controller.
           </t>

            <t> Node k has a classic IPv6 loopback address A:k::/128.
           </t>
            
            <t> A SID at node k with locator block B and function F is represented
     by B:k:F::.
           </t>
           
           <t> The IPv6 address of the nth Link between node X and Y at the X side
     is represented as 2001:DB8:X:Y:Xn::, e.g., the IPv6 address of link6
     (the 2nd link) between N3 and N4 at N3 in Figure 1 is
     2001:DB8:3:4:32::.  Similarly, the IPv6 address of link5 (the 1st
     link between N3 and N4) at node 3 is 2001:DB8:3:4:31::. 
           </t>

           <t> B:k:Cij:: is explicitly allocated as the END.X function at node k 
     towards neighbor node i via jth Link between node i and node j. 
     e.g., B:2:C31:: represents END.X at N2 towards N3 via link3 (the 1st 
     link between N2 and N3). Similarly, B:4:C52:: represents the END.X at 
     N4 towards N5 via link10.
           </t>
           
            <t> A SID list is represented as &lt;S1, S2, S3&gt; where 
            S1 is the first SID
   to visit, S2 is the second SID to visit and S3 is the last SID to
   visit along the SR path.
           </t>

           <t> (SA,DA) (S3, S2, S1; SL)(payload) represents an IPv6 packet with:

        <list style="symbols">
            
            <t> IPv6 header with source address SA, destination addresses DA and
     SRH as next-header
            </t>

            <t> SRH with SID list &lt;S1, S2, S3&gt; with SegmentsLeft = SL
           </t>
            
            <t> Note the difference between the &lt; &gt; and () symbols: 
            &lt;S1, S2, S3&gt;
     represents a SID list where S1 is the first SID and S3 is the last
     SID to traverse.  (S3, S2, S1; SL) represents the same SID list but
     encoded in the SRH format where the rightmost SID in the SRH is the
     first SID and the leftmost SID in the SRH is the last SID.  When
     referring to an SR policy in a high-level use-case, it is simpler
     to use the &lt;S1, S2, S3&gt; notation.  When referring to an
     illustration of the detailed packet behavior, the (S3, S2, S1; SL)
     notation is more convenient.
           </t>

            <t> (payload) represents the the payload of the packet.
           </t>

          </list></t>           
           
           <t> 
           SRH[SL] represents the SID pointed by the SL field in the first SRH.
   In our example, SRH[2] represents S1, SRH[1] represents S2 and SRH[0]
   represents S3.
           </t>
           
          </list></t>      

    </section>

    </section>
    
    <section title="OAM Building Blocks">

      <t>This section defines the various building blocks for
     implementing OAM mechanisms in SRv6 networks. 
      </t>

	<section title="O-flag in Segment Routing Header">

      <t>[I-D.ietf-6man-segment-routing-header] describes the Segment
     Routing Header (SRH) and how SR capable nodes use it. The SRH
     contains an 8-bit "Flags" field [I-D.draft-ietf-6man-segment-
     routing-header]. This document defines the following bit in the
     SRH.Flags to carry the O-flag: </t>
      
      <figure> <artwork><![CDATA[
               0 1 2 3 4 5 6 7
              +-+-+-+-+-+-+-+-+
              |   |O|         |
              +-+-+-+-+-+-+-+-+
	  ]]>
	  </artwork> </figure>            
      <t> Where: 
      
        <list style="hanging">
            
            <t> O-flag: OAM flag. When set, it indicates that this packet is an
          operations and management (OAM) packet. This document defines
          the usage of the O-flag in the SRH.Flags.
            </t>

          </list></t>
      
  <t> The document does not define any other flag in the SRH.Flags
          and meaning and processing of any other bit in SRH.Flags is
          outside of the scope of this document.
           </t>  
           
	<section title="O-flag Processing">

      <t> The SRH.Flags.O-flag implements the "punt a timestamped copy of 
      the packet" behavior. This enables an SRv6 Endpoint node to send a 
      timestamped copy of the packets marked with o-flag to a local OAM 
      process. To prevent multiple evaluations of the datagram, the OAM 
      process MUST NOT respond to any upper-layer header (like ICMP, UDP, 
      etc.) payload. However, the OAM process MAY export the time-stamped 
      copy of the packet to a controller using e.g., IPFIX [RFC7011]. 
      To avoid hitting any performance impact, the processing node SHOULD 
      rate-limit the number of packets punted to the OAM process. 
      Specification of the OAM process or the external controller operations 
      are beyond the scope of this document.
     </t>  
     
      <t>Implementation of the O-flag is OPTIONAL. If a node does not support the
     O-flag, then upon reception it simply ignores it.  
    </t>  
     
    <t>  If a node supports
     the O-flag, it can optionally advertise its potential via node
     capability advertisement in IGP [I-D.ietf-isis-srv6-
     extensions] and BGP-LS [I-D.ietf-idr-bgpls-srv6-ext].
     </t>  

      <t> When N receives a packet whose IPv6 DA is S and S is a local SID, 
the line S01 of the 
the pseudo-code associated with the SID S,  as defined in section 4.3.1.1 of 
[I-D.ietf-6man-segment-routing-header], is modified as follows for the O-flag processing.

     </t>  

     <figure> <artwork><![CDATA[
     S01.1. IF SRH.Flags.O-flag is set and local configuration permits 
            O-flag processing THEN
            a. Make a copy of the packet.    
            b. Send the copied packet, along with a timestamp 
               to the OAM process.      ;; Ref1
     Ref1: An implementation SHOULD copy and record the timestamp as soon as 
     possible during packet processing. Timestamp is not carried in the packet 
     forwarded to the next hop.
	]]>
	</artwork> </figure>  
	
	<t> Please note that the O-flag processing happens before execution of regular 
	processing of the local SID S.
	</t>
	
    </section> <!--end: O-flag Processing -->
    </section> <!--end: O-flag  -->

	<section title="OAM Segments">

      <t>The presence of an OAM SID in the Destination address of the IPv6 header 
      instructs the segment endpoint implementing the OAM SID that the content 
      of the packet is of interest to the node and to process the upper-layer 
      payload, accordingly. </t>  
       
      <t> As OAM SIDs terminate the forwarding of the probe 
      packets for the upper layer processing, they are not designed for  
      implementing In-situ OAM mechanisms defined in [I.D-draft-ietf-ippm-ioam-data]. 
      
      </t>
     	    
    </section> <!--end: OAM Segments  -->

	<section title="End.OP: OAM Endpoint with Punt">

     <t>When N receives a packet destined to S and S is a local End.OP SID,
     N does:
     </t>     	    
     <figure> <artwork><![CDATA[
     S01.   Send the packet to the OAM process
	]]>
	</artwork> </figure>  
	
	<t> The local OAM process further processes the packet, this MAY 
	involve processing protocol layers above IPv6.  For example, ping and traceroute 
	will require ICMP or UDP protocol processing.  
	Once the packet leaves the IPv6 layer the processing is considered host 
	processing and the upper layer protocols MUST be processed as such.
	</t>  
	    
    </section> <!--end: END.OP -->
    
	<section title="End.OTP: OAM Endpoint with Timestamp and Punt">

     <t>When N receives a packet destined to S and S is a local End.OTP SID,
     N does:
     </t>  
     	    
     <figure> <artwork><![CDATA[
      S01.1. Timestamp the packet ;; Ref1
      S01.2. Send the packet, along with a timestamp, to the 
      OAM process 
      Ref1: Timestamping SHOULD be done in hardware, as soon as possible
      during the packet processing.
	]]>
	</artwork> </figure>  
	
	<t> The local OAM process further processes the packet, this MAY involve 
	processing protocol layers above IPv6.  For example, ping and traceroute 
	will require ICMP or UDP protocol processing.  Once the packet leaves the 
	IPv6 layer the processing is considered host processing and the upper layer 
	protocols MUST be processed as such.
	</t>  
	    
    </section> <!--end: END.OTP -->    

    </section> <!--end: OAM Building Blocks--> 
    
	<section title="OAM Mechanisms">
	
      <t> This section describes how OAM mechanisms can be implemented using
     the OAM building blocks described in the previous section.
     </t>
     
     <t> [RFC4443] describes Internet Control Message Protocol for IPv6
     (ICMPv6) that is used by IPv6 devices for network diagnostic and
     error reporting purposes. As Segment Routing with IPv6 data plane
     (SRv6) simply adds a new type of Routing Extension Header, existing
     ICMPv6 ping mechanisms can be used in an SRv6 network. This section
     describes the applicability of ICMPv6 in the SRv6 network and how
     the existing ICMPv6 mechanisms can be used for providing OAM
     functionality.
     </t>	
	
	<t> The document does not propose any changes to the standard ICMPv6
     [RFC4443], [RFC4884] or standard ICMPv4 [RFC792].
     </t>	
	
	<section title="Ping">
     
      <t> The following subsections outline some use cases of the ICMP ping in
     the SRv6 networks. 
     </t>
     
	<section title="Classic Ping">

     <t>The existing mechanism to ping a remote IP prefix, along the
     shortest path, continues to work without any modification. The
     initiator may be an SRv6 node or a classic IPv6 node. Similarly, the
     egress or transit may be an SRv6 capable node or a classic IPv6
     node. 
     </t> 
     
      <t> If an SRv6 capable ingress node wants to ping an IPv6 prefix via an
     arbitrary segment list &lt;S1, S2, S3&gt;, it needs to initiate ICMPv6
     ping with an SR header containing the SID list &lt;S1, S2, S3&gt;. This is
     illustrated using the topology in Figure 1. Assume all the links
     have IGP metric 10 except both links between node2 and node3, which
     have IGP metric set to 100. User issues a ping from node N1 to a
     loopback of node 5, via segment list &lt;B:2:C31, B:4:C52&gt;. 
     </t>
     
     <t> Figure 2 contains sample output for a ping request initiated at node
     N1 to the loopback address of node N5 via a segment list &lt;B:2:C31,
     B:4:C52&gt;.
     </t> 
     
     <figure> <artwork><![CDATA[
     
     > ping A:5:: via segment-list B:2:C31, B:4:C52

     Sending 5, 100-byte ICMP Echos to B5::, timeout is 2 seconds:
     !!!!!
     Success rate is 100 percent (5/5), round-trip min/avg/max = 0.625
     /0.749/0.931 ms
     
             Figure 2 A sample ping output at an SRv6 capable node
	]]>
	</artwork> </figure>  

    <t> All transit nodes process the echo request message like any other
     data packet carrying SR header and hence do not require any change.
     Similarly, the egress node (IPv6 classic or SRv6 capable) does not
     require any change to process the ICMPv6 echo request. For example,
     in the ping example of Figure 2:
     
      <list style="symbols">
          <t>Node N1 initiates an ICMPv6 ping packet with SRH as follows
          (A:1::, B:2:C31)(A:5::, B:4:C52, B:2:C31, SL=2, NH =
          ICMPv6)(ICMPv6 Echo Request).</t>

          <t>Node N2, which is an SRv6 capable node, performs the standard
          SRH processing. Specifically, it executes the END.X function
          (B:2:C31) and forwards the packet on link3 to N3.</t>
          
          <t> Node N3, which is a classic IPv6 node, performs the standard
          IPv6 processing. Specifically, it forwards the echo request
          based on DA B:4:C52 in the IPv6 header. </t>
          
          <t> Node N4, which is an SRv6 capable node, performs the standard
          SRH processing. Specifically, it observes the END.X function
          (B:4:C52) with PSP (Penultimate Segment POP) on the echo
          request packet and removes the SRH and forwards the packet
          across link10 to N5. </t>
          
          <t> The echo request packet at N5 arrives as an IPv6 packet without
          an SRH. Node N5, which is a classic IPv6 node, performs the
          standard IPv6/ ICMPv6 processing on the echo request and
          responds using ICMPv6 Echo Reply, accordingly. </t>
          
        </list> </t>
     	    
    </section> <!--end: Classic Ping -->    

	<section title="Pinging a SID">

     <t>The classic ping described in the previous section cannot be used to
     ping a remote SID function, as explained using an example in the
     following. 
     </t> 
     
      <t> Consider the case where the user wants to ping the remote SID
     function B:4:C52 from node N1. Node N1 constructs the
     ping packet (A:1::, B:4:C52)(ICMPv6 Echo Request). 
     The ping fails because the node N4
     receives the ICMPv6 echo request with DA set to B:4:C52 but the next
     header is ICMPv6, instead of SRH.  
     </t>
     
     <t> To perform ICMPv6 ping to a target SID an echo request message is 
     generated by the initiator with the END.OP or END.OTP SID in the 
     segment-list of the SRH immediately preceding the target SID. 
     There MAY be additional segments preceding the 
     END.OP/ END.OTP SID. </t> 

     <t> When the node instantiating a SID S of type END.OP or END.OTP 
     receives a packet with S in the destination address of the IPv6 header it 
     sends it to the OAM process. The OAM process verifies the segment 
     following S  is a locally instantiated SID. It then processes the Upper 
     layer header of the packet, as a host, responding to the echo request 
     message in the ICMPv6 payload. </t> 

     <t> When the segment following S is not verified by the OAM process an 
     ICMPv6 error message type 4 (parameter problem) code 0 (erroneous header 
     field encountered) with pointer set to the segment following S  (the target SID)
     is generated for the packet and the packet is discarded. </t> 
     
     <t>  An implementation of the OAM process SID verification SHOULD 
     do the following:  
          
          <list style="symbols">
          <t>Verify that the SID is locally instantiated.</t>

          <t>Verify that the SID is instantiated in the data plane 
          (this may include verification of the SID in NPUs or forwarding hardware, 
          as applicable).</t>
          </list> 
          
     </t> 
	<section title="Ping using END.OP/ END.OTP">

     <t>  This section uses END.OTP SID for the ping illustration but the
     procedures are equally applicable to the END.OP SID. 
     </t> 
     
     <t>  Consider the example where the user wants to ping a remote
          SID function B:4:C52, via B:2:C31, from node N1. To force a
          punt of the ICMPv6 echo request at the node N4, node N1 inserts
          the END.OTP SID just before the target SID B:4:C52 in the SRH.
          The ICMPv6 echo request is processed at the individual nodes
          along the path as follows: 
          
          <list style="symbols">
          <t>Node N1 initiates an ICMPv6 ping packet with SRH as follows
          (A:1::, B:2:C31)(B:4:C52, B:4:OTP, B:2:C31; SL=2;
          NH=ICMPv6)(ICMPv6 Echo Request).</t>

          <t>Node N2, which is an SRv6 capable node, performs the standard
          SRH processing. Specifically, it executes the END.X function
          (B:2:C31) on the echo request packet.</t>
          <t>Node N3 receives the packet as follows (A:1::,
          B:4:OTP)(B:4:C52, B:4:OTP, B:2:C31 ; SL=1; NH=ICMPv6)(ICMPv6
          Echo Request). Node N3, which is a classic IPv6 node, performs
          the standard IPv6 processing. Specifically, it forwards the
          echo request based on DA B:4:OTP in the IPv6 header.</t>

          <t>When node N4 receives the packet (A:1::, B:4:OTP)(B:4:C52,
          B:4:OTP, B:2:C31 ; SL=1; NH=ICMPv6)(ICMPv6 Echo Request), it
          processes the END.OTP SID, as described in the pseudocode in
          Section 3. The packet gets time-stamped and punted to the 
          OAM process for processing. 
          The OAM process checks if the next SID in
          SRH (the target SID B:4:C52) is locally programmed. </t> 

     <t>  If the next SID is not locally programmed, the OAM process returns 
     an ICMPv6 
     error message type 4 (parameter problem) code 0 (erroneous header 
     field encountered) with pointer set to the target SID B:4:C52 
     and the packet is discarded. 
     </t> 

          <t>
          If the next SID is locally programmed, the node processes 
          the upper layer header. 
          As part of the upper layer header (ICMPv6) processing  
          node N4 sends the ICMPv6 Echo Reply message [RFC4443]. </t>
          
          </list> 
          
     </t> 
     	    
    </section> <!--end: end-to-end Ping -->  
    </section> <!--end: SID Ping -->    
     	    
    </section> <!--end: Ping-->    	

	<section title="Traceroute">

     <t>  There is no hardware or software change required for traceroute
     operation at the classic IPv6 nodes in an SRv6 network. That
     includes the classic IPv6 node with ingress, egress or transit
     roles. Furthermore, no protocol changes are required to the standard
     traceroute operations. In other words, existing traceroute
     mechanisms work seamlessly in the SRv6 networks. 
     </t> 
     
     <t>  The following subsections outline some use cases of the traceroute
     in the SRv6 networks. 
     </t>

	<section title="Classic Traceroute">

     <t> The existing mechanism to traceroute a remote IP prefix, along the
     shortest path, continues to work without any modification. The
     initiator may be an SRv6 node or a classic IPv6 node. Similarly, the
     egress or transit may be an SRv6 node or a classic IPv6 node. 
     </t> 
     
     <t>  If an SRv6 capable ingress node wants to traceroute to IPv6 prefix
     via an arbitrary segment list &lt;S1, S2, S3&gt;, it needs to initiate
     traceroute probe with an SR header containing the SID list 
     &lt;S1, S2, S3&gt;. That is illustrated using the topology in Figure 1. Assume all
     the links have IGP metric 10 except both links between node2 and
     node3, which have IGP metric set to 100. User issues a traceroute
     from node N1 to a loopback of node 5, via segment list 
     &lt;B:2:C31, B:4:C52&gt;. Figure 3 contains sample output for the traceroute
     request. 
     </t>

     <figure> <artwork><![CDATA[
     
     > traceroute A:5:: via segment-list B:2:C31, B:4:C52

     Tracing the route to A:5::
      1  2001:DB8:1:2:21:: 0.512 msec 0.425 msec 0.374 msec
         SRH: (A:5::, B:4:C52, B:2:C31, SL=2)
      2  2001:DB8:2:3:31:: 0.721 msec 0.810 msec 0.795 msec
         SRH: (A:5::, B:4:C52, B:2:C31, SL=1)
      3  2001:DB8:3:4::41:: 0.921 msec 0.816 msec 0.759 msec
         SRH: (A:5::, B:4:C52, B:2:C31, SL=1)
      4  2001:DB8:4:5::52:: 0.879 msec 0.916 msec 1.024 msec

      Figure 3 A sample traceroute output at an SRv6 capable node
	]]>
	</artwork> </figure>  

     <t>  Please note that information for hop2 is returned by N3, which is a
     classic IPv6 node. Nonetheless, the ingress node is able to display
     SR header contents as the packet travels through the IPv6 classic
     node. This is because the "Time Exceeded Message" ICMPv6 message can
     contain as much of the invoking packet as possible without the 
     ICMPv6 packet exceeding the minimum IPv6 MTU [RFC4443]. The SR
     header is also included in these ICMPv6 messages initiated by the
     classic IPv6 transit nodes that are not running SRv6 software.
     Specifically, a node generating ICMPv6 message containing a copy of
     the invoking packet does not need to understand the extension
     header(s) in the invoking packet.
     </t> 
     
     <t>  The segment list information returned for hop1 is returned by N2,
     which is an SRv6 capable node. Just like for hop2, the ingress node
     is able to display SR header contents for hop1.
     </t>

     <t>  There is no difference in processing of the traceroute probe at an
     IPv6 classic node and an SRv6 capable node. Similarly, both IPv6
     classic and SRv6 capable nodes may use the address of the interface on
     which probe was received as the source address in the ICMPv6
     response. ICMP extensions defined in [RFC5837] can be used to also
     display information about the IP interface through which the
     datagram would have been forwarded had it been forwardable, and the
     IP next hop to which the datagram would have been forwarded, the IP
     interface upon which a datagram arrived, the sub-IP component of an
     IP interface upon which a datagram arrived. 
     </t>
     
     <t>  The information about the IP address of the incoming interface on
     which the traceroute probe was received by the reporting node is
     very useful. This information can also be used to verify if SID
     functions B:2:C31 and B:4:C52 are executed correctly by N2 and N4,
     respectively. Specifically, the information displayed for hop2
     contains the incoming interface address 2001:DB8:2:3:31:: at N3.
     This matches with the expected interface bound to END.X function
     B:2:C31 (link3). Similarly, the information displayed for hop5
     contains the incoming interface address 2001:DB8:4:5::52:: at N5.
     This matches with the expected interface bound to the END.X function
     B:4:C52 (link10). 
     </t>    
      	    
    </section> <!--end: Classic Traceroute -->    

	<section title="Traceroute to a SID">

     <t>  The classic traceroute described in the previous section cannot be
     used to traceroute a remote SID function, as explained using an
     example in the following.
     </t> 
     
     <t>  Consider the case where the user wants to traceroute the remote SID
    function B:4:C52 from node N1. The trace route fails at N4.
     This is because the node N4 receives a trace route probe where next header is
     UDP or ICMPv6, instead of SRH (even though the hop limit is set to 1).
     </t>

     <t>  To traceroute a target SID a probe message is generated by the initiator 
     with the END.OP or END.OTP SID in the segment-list of the SRH immediately 
     preceding the target SID. There MAY be additional segments preceding 
     the END.OP/ END.OTP SID. 
     </t> 

     <t>  The node instantiating a SID S of type END.OP or END.OTP receives a packet 
     with S in the destination address of the IPv6 header and sends it to the OAM 
     process (before processing the TTL). The OAM process verifies the segment 
     following S  is a locally instantiated SID. It then processes the Upper layer 
     header of the packet, as a host, responding to the probe message. 
     </t> 

     <t>  When the segment following S is not verified by the OAM process an ICMPv6 
     error message type 4 (parameter problem) code 0 (erroneous header 
     field encountered) with pointer set to the segment following S (the target SID) 
     is generated for the packet and the packet is discarded. 
     </t> 
     
     <t>  An implementation of the OAM process SID verification SHOULD do the following: 
     
          <list style="symbols">
          <t>Verify that the SID is locally instantiated. </t>
          <t>Verify that the SID is instantiated in the data plane (this
           may include verification of the SID in NPUs or forwarding hardware, 
           as applicable).</t>
          </list>      
     </t>

	<section title="Traceroute using END.OP/ END.OTP">

     <t>  In this section, hop-by-hop traceroute to a SID function is
     exemplified using UDP probes. However, the procedure is equally
     applicable to other implementation of traceroute mechanism.
     Furthermore, the illustration uses the END.OTP SID but the
     procedures are equally applicable to the END.OP SID.
     </t> 
     
     <t>  Consider the same example where the user wants to traceroute to a
     remote SID function B:4:C52, via B:2:C31, from node N1. To force a
     punt of the traceroute probe only at the node N4, node N1 inserts
     the END.OTP SID just before the target SID B:4:C52 in the SRH. The
     traceroute probe is processed at the individual nodes along the path
     as follows: 
     
     <list style="symbols">
          <t>Node N1 initiates a traceroute probe packet with a
          monotonically increasing value of hop count and SRH as follows
          (A:1::, B:2:C31)(B:4:C52, B:4:OTP, B:2:C31; SL=2;
          NH=UDP)(Traceroute probe). </t>
          <t>When node N2 receives the packet with hop-count = 1, it
          processes the hop count expiry. Specifically, the node N2
          responses with the ICMPv6 message (Type: "Time Exceeded", Code:
          "Time to Live exceeded in Transit"). </t>
          <t>When Node N2 receives the packet with hop-count > 1, it
          performs the standard SRH processing. Specifically, it executes
          the END.X function (B:2:C31) on the traceroute probe.</t>
          <t>When node N3, which is a classic IPv6 node, receives the packet
          (A:1::, B:4:OTP)(B:4:C52, B:4:OTP, B:2:C31 ; HC=1, SL=1;
          NH=UDP)(Traceroute probe) with hop-count = 1, it processes the
          hop count expiry. Specifically, the node N3 responses with the
          ICMPv6 message (Type: "Time Exceeded", Code: "Time to Live
          exceeded in Transit").</t>
          <t>When node N3, which is a classic IPv6 node, receives the packet
          with hop-count > 1, it performs the standard IPv6 processing.
          Specifically, it forwards the traceroute probe based on DA
          B:4:OTP in the IPv6 header. </t>
          <t>When node N4 receives the packet (A:1::, B:4:OTP)(B:4:C52,
          B:4:OTP, B:2:C31 ; SL=1; HC=1, NH=UDP)(Traceroute probe), it
          processes the END.OTP SID, as described in the pseudocode in
          Section 3. Before hop-limit processing, the packet gets timestamped 
          and punted to the OAM process for
          processing. The OAM process checks if the next SID in
          SRH (the target SID B:4:C52) is locally programmed. </t> 

     <t>  If the next SID is not locally programmed, the OAM process returns 
     an ICMPv6 
     error message type 4 (parameter problem) code 0 (erroneous header 
     field encountered) with pointer set to the target SID B:4:C52 
     and the packet is discarded. 
     </t> 

          <t>
          If the next SID is locally programmed, the node processes 
          the upper layer header. 
          As part of the upper layer header processing node N4 responses
          with the ICMPv6 message (Type: Destination unreachable, Code:
          Port Unreachable).  </t>
    </list>  
     </t>

     <t> Figure 4 displays a sample traceroute output for this example. 
     
     <figure> <artwork><![CDATA[
     > traceroute srv6 B:4:C52 via segment-list B:2:C31

     Tracing the route to SID function B:4:C52
      1  2001:DB8:1:2:21 0.512 msec 0.425 msec 0.374 msec
         SRH: (B:4:C52, B:4:OTP, B:2:C31; SL=2)
      2  2001:DB8:2:3:31 0.721 msec 0.810 msec 0.795 msec
         SRH: (B:4:C52, B:4:OTP, B:2:C31; SL=1)
      3  2001:DB8:3:4::41 0.921 msec 0.816 msec 0.759 msec
         SRH: (B:4:C52, B:4:OTP, B:2:C31; SL=1)

        Figure 4 A sample output for hop-by-hop traceroute to a SID function

	]]>
	</artwork> </figure>            
     </t> 
     	    
    </section> <!--end: Hop-by-hop traceroute -->    
    
    </section> <!--end: Traceroute to a SID Function-->    

    </section> <!--end: Traceroute -->    	

	<section title="Monitoring of SRv6 Paths">

     <t>  In the recent past, network operators are interested in performing
     network OAM functions in a centralized manner.  Various data models
     like YANG are available to collect data from the network and manage
     it from a centralized entity. 
     </t> 
     
     <t>  SR technology enables a centralized OAM entity to perform path
     monitoring from centralized OAM entity without control plane
     intervention on monitored nodes. [RFC 8403]
     describes such a centralized OAM mechanism. Specifically, the draft
     describes a procedure that can be used to perform path continuity
     check between any nodes within an SR domain from a centralized
     monitoring system, with minimal or no control plane intervene on the
     nodes. However, the draft focuses on SR networks with MPLS data
     plane. The same concept applies to the SRv6 networks. This document
     describes how the concept can be used to perform path monitoring in
     an SRv6 network. This document describes how the concept can be used
     to perform path monitoring in an SRv6 network as follows. 
     </t>

     <t>  In the above reference topology, N100 is the centralized monitoring
     system implementing an END function B:100:1::. In order to verify a
     segment list &lt;B:2:C31, B:4:C52&gt;, N100 generates a probe packet with
     SRH set to (B:100:1::, B:4:C52, B:2:C31, SL=2). The controller routes
     the probe packet towards the first segment, which is B:2:C31. N2
     performs the standard SRH processing and forward it over link3 with
     the DA of IPv6 packet set to B:4:C52. N4 also performs the normal
     SRH processing and forward it over link10 with the DA of IPv6 packet
     set to B:100:1::. This makes the probe loops back to the centralized
     monitoring system.
     </t> 
     
     <t>  In the reference topology in Figure 1, N100 uses an IGP protocol
     like OSPF or ISIS to get the topology view within the IGP domain.
     N100 can also use BGP-LS to get the complete view of an inter-domain
     topology. In other words, the controller leverages the visibility of
     the topology to monitor the paths between the various endpoints
     without control plane intervention required at the monitored nodes. 
     </t>
     	    
    </section> <!--end: Monitoring of SRv6 Paths -->    
            

    </section> <!--end: OAM Mechanisms--> 	

    <section anchor="Status" title="Implementation Status">
     <t>  This section is to be removed prior to publishing as an RFC. 
     </t>
     
     <t>  See [I-D.matsushima-spring-srv6-deployment-status] for updated
   deployment and interoperability reports. 
     </t>  
     	    
    </section> <!--end: Implementation Status-->    


    <section anchor="Security" title="Security Considerations">
     <t>  This document does not define any new protocol extensions and relies
     on existing procedures defined for ICMP. This document does not
     impose any additional security challenges to be considered beyond
     security considerations described in [RFC4884], [RFC4443], [RFC792], 
     RFCs that updates these RFCs, [I-D.ietf-6man-segment-routing-header] and
    [I-D.ietf-spring-srv6-network-programming]. 
     </t> 
     	    
    </section> <!--end: Security Considerations-->    



    <section anchor="IANA" title="IANA Considerations">

<section title="ICMPv6 type Numbers RegistrySEC">

     <t>  This document defines one ICMPv6 Message, a type that has been
     allocated from the "ICMPv6 'type' Numbers" registry of [RFC4443].
     Specifically, it requests to add the following to the "ICMPv6 Type
     Numbers" registry: 
     <list style="hanging">
          <t>TBA (suggested value: 162) SRv6 OAM Message.</t>
     </list>      
     
     </t> 
     
     <t>  The document also requests the creation of a new IANA registry to
     the "ICMPv6 'Code' Fields" against the "ICMPv6 Type Numbers TBA - SRv6
     OAM Message" with the following codes: 

     <figure> <artwork><![CDATA[
    Code  Name                                     Reference
    --------------------------------------------------------
     0     No Error                                This document
     1     SID is not locally implemented          This document
     2     O-flag punt at Transit                  This document    
	]]>
	</artwork> </figure>  
     
     </t>
     	    
    </section> <!--end: SICMPv6 type Numbers RegistryEC-->    

	<section title="SRv6 OAM Endpoint Types">

     <t>  This I-D requests to IANA to allocate, within the "SRv6 Endpoint
     Behaviors Registry" sub-registry belonging to the top-level
     "Segment-routing with
     IPv6 dataplane (SRv6) Parameters" registry [I-D.ietf-spring-
     srv6-network-programming], the following allocations: 

     <figure> <artwork><![CDATA[
        +------------------+-------------------+-----------+
        | Value (Suggested | Endpoint Behavior | Reference |
        | Value)           |                   |           |
        +------------------+-------------------+-----------+
        | TBA (40)         |        End.OP     | [This.ID] |
        | TBA (41)         |        End.OTP    | [This.ID] |
        +------------------+-------------------+-----------+
	]]>
	</artwork> </figure>  
	     
     </t> 
     	    
    </section> <!--end: SRv6 OAM Endpoint Types-->        

    </section>  <!--end: IANA Considerations-->    

    <section anchor="Acknowledgements" title="Acknowledgements">
      <t> The authors would like to thank Gaurav Naik for his review comments. </t>
    </section>

    <section anchor="Contributors" title="Contributors">
      <t>The following people have contributed to this document:
      <figure>
      <artwork><![CDATA[
   Robert Raszuk
   Bloomberg LP
   Email: robert@raszuk.net
        ]]>
        </artwork>
        </figure>

    <figure>
      <artwork><![CDATA[
   John Leddy
   Individual
   Email: john@leddy.net
        ]]>
        </artwork>
        </figure>

      <figure>
      <artwork><![CDATA[
   Gaurav Dawra
   LinkedIn
   Email: gdawra.ietf@gmail.com
        ]]>
        </artwork>
        </figure>
        
      <figure>
      <artwork><![CDATA[
   Bart Peirens
   Proximus
   Email: bart.peirens@proximus.com
        ]]>
        </artwork>
        </figure>        

      <figure>
      <artwork><![CDATA[
   Nagendra Kumar
   Cisco Systems, Inc.
   Email: naikumar@cisco.com
        ]]>
        </artwork>
        </figure>
        
      <figure>
      <artwork><![CDATA[
   Carlos Pignataro
   Cisco Systems, Inc.
   Email: cpignata@cisco.com
        ]]>
        </artwork>
        </figure>
        
      <figure>
      <artwork><![CDATA[
   Rakesh Gandhi
   Cisco Systems, Inc.
   Canada
   Email: rgandhi@cisco.com
        ]]>
        </artwork>
        </figure>
        
      <figure>
      <artwork><![CDATA[
   Frank Brockners
   Cisco Systems, Inc.
   Germany
   Email: fbrockne@cisco.com
        ]]>
        </artwork>
        </figure>
        
      <figure>
      <artwork><![CDATA[
   Darren Dukes
   Cisco Systems, Inc.
   Email: ddukes@cisco.com 
        ]]>
        </artwork>
        </figure>
        
      <figure>
      <artwork><![CDATA[
   Cheng Li
   Huawei
   Email: chengli13@huawei.com
        ]]>
        </artwork>
        </figure>
        
      <figure>
      <artwork><![CDATA[
   Faisal Iqbal
   Individual
   Email: faisal.ietf@gmail.com
        ]]>
        </artwork>
        </figure>                                                
        </t>
        
    </section>    
    
</middle>

  <back>
    <references title="Normative References">
      <?rfc include="http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml"?>

      <?rfc include="http://xml.resource.org/public/rfc/bibxml3/reference.I-D.ietf-spring-srv6-network-programming"?>

      <?rfc include="http://xml.resource.org/public/rfc/bibxml3/reference.I-D.ietf-6man-segment-routing-header"?>
      
    </references>

    <references title="Informative References">
      <?rfc include="http://xml.resource.org/public/rfc/bibxml/reference.RFC.0792.xml"?>

      <?rfc include="http://xml.resource.org/public/rfc/bibxml/reference.RFC.4443.xml"?>

      <?rfc include="http://xml.resource.org/public/rfc/bibxml/reference.RFC.4884.xml"?>

      <?rfc include="http://xml.resource.org/public/rfc/bibxml/reference.RFC.5837.xml"?>

      <?rfc include="http://xml.resource.org/public/rfc/bibxml/reference.RFC.8403.xml"?>

      <?rfc include="http://xml.resource.org/public/rfc/bibxml3/reference.I-D.matsushima-spring-srv6-deployment-status"?>

    </references>
  </back>

</rfc>


